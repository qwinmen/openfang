Скачиваем репозиторий:
git clone https://github.com/anmaped/openfang.git --recursive
Собираем через скрипт:
sudo sh buildopenfang.sh
-----ОШИБКИ СБОРКИ--------
1.
You must install 'python' on your build machine
make: *** [support/dependencies/dependencies.mk:28: core-dependencies] Error 1
Открываем /_build/buildroot-2016.02/support/dependencies/dependencies.sh и правим
for prog in patch perl tar wget cpio python unzip rsync bc ${DL_TOOLS} ; do
на
for prog in patch perl tar wget cpio python3 unzip rsync bc ${DL_TOOLS} ; do
2.
freadahead.c:91:3: error: #error "Please port gnulib freadahead.c to your platform!
Открываем /_build/buildroot-2016.02/output/build/host-m4-1.4.17/lib/freadahead.c
-#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
+#if defined _IO_EOF_SEEN || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
3.
fseeko.c:109:4: error: #error "Please port gnulib fseeko.c to your platform!
Открываем /_build/buildroot-2016.02/output/build/host-m4-1.4.17/lib/fseeko.c
-#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
+#if defined _IO_EOF_SEEN || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */

-#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
+#if defined _IO_EOF_SEEN || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
4.
freadahead.c:32:26: error: '_IO_IN_BACKUP' undeclared (first use in this function)
Открываем /_build/buildroot-2016.02/output/build/host-m4-1.4.17/lib/stdio-impl.h
ищем блок:
/* Many stdio implementations have the same logic and therefore can share
   the same implementation of stdio extension API, except that some fields
   have different naming conventions, or their access requires some casts.  */


/* BSD stdio derived implementations.  */
меняем на:
/* Many stdio implementations have the same logic and therefore can share
   the same implementation of stdio extension API, except that some fields
   have different naming conventions, or their access requires some casts.  */

/* Glibc 2.28 made _IO_IN_BACKUP private.  For now, work around this
    problem by defining it ourselves.  FIXME: Do not rely on glibc
    internals.  */
#if !defined _IO_IN_BACKUP && defined _IO_EOF_SEEN
# define _IO_IN_BACKUP 0x100
#endif    

/* BSD stdio derived implementations.  */
5.
ismounted.c:(.text+0x23d): undefined reference to `major'
5.1 находим файл devname.c (путь /openfang/_build/buildroot-2016.02/output/build/host-e2fsprogs-1.42.13/lib/blkid/devname.c )
внутри ищем:
#if HAVE_ERRNO_H
#include <errno.h>
#endif
#if HAVE_SYS_MKDEV_H
#include <sys/mkdev.h>
#endif
#include <time.h>

#include "blkidP.h"

и заменяем на:
#if HAVE_ERRNO_H
#include <errno.h>
#endif
#if HAVE_SYS_MKDEV_H
#include <sys/mkdev.h>
#elif HAVE_SYS_SYSMACROS_H
#include <sys/sysmacros.h>
#endif
#include <time.h>

#include "blkidP.h"

5.2 находим файл devno.c (путь openfang/_build/buildroot-2016.02/output/build/host-e2fsprogs-1.42.13/lib/blkid/devno.c )
Ищем блок:
#if HAVE_SYS_MKDEV_H
#include <sys/mkdev.h>
#endif

#include "blkidP.h"

Заменяем его на:
#if HAVE_SYS_MKDEV_H
#include <sys/sysmacros.h>
#elif HAVE_SYS_SYSMACROS_H
#include <sys/sysmacros.h>
#endif

#include "blkidP.h"

5.3 находим файл probe.c (путь openfang/_build/buildroot-2016.02/output/build/host-e2fsprogs-1.42.13/lib/blkid/probe.c )
Ищем блок:
#ifdef HAVE_SYS_MKDEV_H
#include <sys/mkdev.h>
#endif
#ifdef __linux__

И меняем его на:
#ifdef HAVE_SYS_MKDEV_H
#include <sys/sysmacros.h>
#elif HAVE_SYS_SYSMACROS_H
#include <sys/sysmacros.h>
#endif
#ifdef __linux__

5.4 находим файл save.c (путь openfang/_build/buildroot-2016.02/output/build/host-e2fsprogs-1.42.13/lib/blkid/save.c )
Ищем блок:
#ifdef HAVE_SYS_MKDEV_H
#include <sys/mkdev.h>
#endif
#ifdef HAVE_ERRNO_H

Меняем на:
#ifdef HAVE_SYS_MKDEV_H
#include <sys/sysmacros.h>
#elif HAVE_SYS_SYSMACROS_H
#include <sys/sysmacros.h>
#endif
#ifdef HAVE_ERRNO_H

5.5 находим файл finddev.c (путь openfang/_build/buildroot-2016.02/output/build/host-e2fsprogs-1.42.13/lib/ext2fs/finddev.c )
Ищем блок:
#if HAVE_SYS_MKDEV_H
#include <sys/mkdev.h>
#endif

#include "ext2_fs.h"

И меняем его на:
#if HAVE_SYS_MKDEV_H
#include <sys/sysmacros.h>
#elif HAVE_SYS_SYSMACROS_H
#include <sys/sysmacros.h>
#endif

#include "ext2_fs.h"

5.6 находим e2fsprogs.mk (openfang/_build/buildroot-2016.02/package/e2fsprogs/e2fsprogs.mk)
Ищем блок:
E2FSPROGS_VERSION = 1.42.13
И меняем его на:
E2FSPROGS_VERSION = 1.46.4

5.7 находим e2fsprogs.hash (openfang/_build/buildroot-2016.02/package/e2fsprogs/e2fsprogs.hash)
Меняем внутрености на:
# From https://mirrors.edge.kernel.org/pub/linux/kernel/people/tytso/e2fsprogs/v1.46.3/sha256sums.asc
sha256  b11042533c1b1dcf17512f0da48e05b0c573dada1dd8b762864d10f4dc399713  e2fsprogs-1.46.4.tar.xz
# Locally calculated
sha256  5da5ef153e559c1d990d4c3eedbedd4442db892d37eae1f35fff069de8ec9020  NOTICE
sha256  032989b508f1a72ebee5b3417e55d06d473f9ee203e45ab11864a7e49cdec63d  lib/ss/mit-sipb-copyright.h
sha256  47182fe6631a32f271a15bbe210751b3825b7199f588879aac7d4804fc8b4b8f  lib/et/internal.h


6. 
fseterr.c:77:3: error: #error "Please port gnulib fseterr.c to your platform!
Открываем fseterr.c (openfang/_build/buildroot-2016.02/output/build/host-bison-3.0.4/lib/fseterr.c)
Ищем
#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
Меняем
#if defined _IO_EOF_SEEN || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */

Открываем stdio-impl.h (openfang/_build/buildroot-2016.02/output/build/host-bison-3.0.4/lib/stdio-impl.h)
Ищем блок
/* Many stdio implementations have the same logic and therefore can share
   the same implementation of stdio extension API, except that some fields
   have different naming conventions, or their access requires some casts.  */


/* BSD stdio derived implementations.  */
Меняем на блок
/* Many stdio implementations have the same logic and therefore can share
   the same implementation of stdio extension API, except that some fields
   have different naming conventions, or their access requires some casts.  */

/* Glibc 2.28 made _IO_IN_BACKUP private.  For now, work around this
   problem by defining it ourselves.  FIXME: Do not rely on glibc
   internals.  */
#if !defined _IO_IN_BACKUP && defined _IO_EOF_SEEN
# define _IO_IN_BACKUP 0x100
#endif

/* BSD stdio derived implementations.  */










